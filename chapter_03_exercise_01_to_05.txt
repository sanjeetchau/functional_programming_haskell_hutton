1.What are the types of the following values?

[’a’,’b’,’c’] 			::	[Char]
(’a’,’b’,’c’)			::	(Char, Char, Char)
[(False,’O’),(True,’1’)]	::	[(Bool, Char)]
([False,True],[’0’,’1’])	::	([Bool], [Char])
[tail, init, reverse]		::	[[a] -> [a]]


2.Write down definitions that have the following types; it does not
matter what the definitions actually do as long as they are
type correct.

bools :: [Bool]
bools = [True, False]

nums :: [[Int]]
nums = [[1,2], [2,3], [3,4]]

add :: Int -> Int -> Int -> Int
add x y z = x + y + z

copy :: a -> (a,a)
copy x = (x,x)

apply :: (a -> b) -> a -> b
apply f x


3.What are the types of the following functions?

second xs = head (tail xs)
second :: ([a] -> [a]) -> a

swap (x,y) = (y,x)
swap :: (a,b) -> (b,a)

pair x y = (x,y)
pair :: a -> b -> (a,b)

double x = x*2
double :: Float -> Float

palindrome xs = reverse xs == xs
palindrome :: ([a] -> [a]) -> Bool

twice f x = f (f x)
twice :: (a -> b) -> a -> b		-- don't think this one's correct

Hint: take care to include the necessary class constraints in the
types if the functions are defined using overloaded operators.


4.Check your answers to the preceding three questions using
GHCi.
	Done.


5.Why is it not feasible in general for function types to be
instances of the Eq class? When is it feasible? Hint: two
functions of the same type are equal if they always return
equal results for equal arguments.

	Because
